---
title: "Proportions"
format: pdf
editor: visual
---

## 

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(qtl2)
library(janitor)
library(corrplot)
#A problem we ran into was trying to merge the datasets. I noticed the births columns by ethnicities did not have the same values. 
```

```{r}
fertility_data <- read.csv("~/Desktop/UCSB/PSTAT100-final/fertility_data.csv")
infant_mortality_biannual_data <- read.csv("~/Desktop/UCSB/PSTAT100-final/infant_mortality_biannual_data.csv")
# fertility_data <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/fertility_data.csv")
# infant_mortality_biannual_data <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/infant_mortality_biannual_data.csv")
```

```{r}
#not part of dataset
fertility_data %>% 
  group_by(state, year) %>% 
  summarise(total_1524 = sum(births_age1524),
            total_2534 = sum(births_age2534),
            total_3544 = sum(births_age3544),
            total_nohs = sum(births_nohs),
            total_hs = sum(births_hs),
            total_somecoll = sum(births_somecoll),
            total_coll = sum(births_somecoll),
            total_married = sum(births_married),
            total_unmarried = sum(births_unmarried),
            total_medicaid = sum(births_medicaid),
            total_nonmedicaid = sum(births_nonmedicaid),
            total_nhblack = sum(births_nhblack))

births_deaths %>% 
  group_by(state, year) %>% 
  summarise(total_1524 = sum(births_age1524),
            total_2534 = sum(births_age2534),
            total_3544 = sum(births_age3544),
            total_nohs = sum(births_nohs),
            total_hs = sum(births_hs),
            total_somecoll = sum(births_somecoll),
            total_coll = sum(births_somecoll),
            total_married = sum(births_married),
            total_unmarried = sum(births_unmarried),
            total_medicaid = sum(births_medicaid),
            total_nonmedicaid = sum(births_nonmedicaid),
            total_nhblack = sum(norm_births_nhblack))
```


```{r} 
#for dataset
fertility_update <- fertility_data %>%
  filter(bmcode %in% c(1, 2, 3)) %>%  
  group_by(state, year) %>%  
  summarise(across(births_age1524:pop_age3544, ~sum(., na.rm = TRUE))) %>%  
  mutate(bacode =1,
         across(pop_total:pop_age3544, ~./3)) %>% 
  ungroup() 

# population_data <- fertility_data %>% 
#   group_by(state, year) %>% 
#   summarise(across(pop_total:pop_age3544, ~dplyr::first(na.omit(.)))) %>% 
#   ungroup()

fertility_update2 <- fertility_data %>%
  filter(bmcode %in% c(4, 5, 6)) %>%  
  group_by(state, year) %>%  
  summarise(across(births_age1524:pop_age3544, ~sum(., na.rm = TRUE))) %>%  
  mutate(bacode = 2,
         across(pop_total:pop_age3544, ~./3)) %>% 
  ungroup()

# fertility_update <- fertility_update %>% 
#   left_join(population_data, by =c("state", "year"))

# fertility_update <- fertility_update %>% 
#   mutate(across(pop_total:pop_age3544, ~./3))

# fertility_update2 <- fertility_update2 %>% 
#   left_join(population_data, by =c("state", "year"))

# fertility_update2 <- fertility_update2 %>% 
#   mutate(across(pop_total:pop_age3544, ~./3))

fertility_merged <- bind_rows(fertility_update, fertility_update2)

fertility_merged <- fertility_merged %>% 
  filter(!year == 2024)
  
fertility_merged |>
  summarize(across(births_age1524:births_nonmedicaid, \(x) mean(is.na(x))))

#births_nhblack:births_otherraceeth, deaths_bhblack,deaths_nhwhite,deaths_hisp, deaths_noncon, deaths_neo, deaths_total
infant_mortality_biannual_data |>
  summarize(across(c(births_nhblack:births_otherraceeth, 
                     deaths_nhblack, deaths_nhwhite, deaths_hisp, 
                     deaths_noncon, deaths_neo, deaths_total), 
                   ~ mean(is.na(.))))
```

```{r}
fertility_merged2 <- fertility_merged %>% 
  select(state:bacode) %>% 
   mutate(
  prop_births_1524 = births_age1524 / births_total,
         prop_births_2534 = births_age2534 / births_total,
         prop_births_3544 = births_age3544 / births_total,
         prop_births_nohs = births_nohs / births_total,
         prop_births_hs = births_hs / births_total,
         prop_births_somecoll = births_somecoll / births_total,
         prop_births_coll = births_coll / births_total,
         prop_births_married = births_married / births_total,
         prop_births_unmarried = births_unmarried / births_total,
         prop_births_medicaid = births_medicaid / births_total,
         prop_births_nhblack = births_nhblack / births_total,
         prop_births_nhwhite = births_nhwhite / births_total,
         prop_births_hisp = births_hisp / births_total,
         prop_births_otherraceeth = births_otherraceeth / births_total,
         # prop_1524 = pop_age1524 / pop_total,
         # prop_2534 = pop_age2534 / pop_total,
         # prop_3544 = pop_age3544 / pop_total,
         # prop_nohs = pop_nohs / pop_total,
         # prop_hs = pop_hs / pop_total,
         # prop_somecoll = pop_somecoll / pop_total,
         # prop_coll = pop_coll / pop_total,
         # prop_married = pop_married /pop_total,
         # prop_unmarried = pop_unmarried / pop_total,
         # prop_medicaid = pop_medicaid / pop_total,
         # prop_nblack = pop_nhblack / pop_total,
         # prop_nwhite = pop_nhwhite / pop_total,
         # prop_hisp = pop_hisp / pop_total,
         # prop_otherraceeth = pop_otherraceeth / pop_total
         fer_rate_1524 = (births_age1524 / pop_age1524),
         fer_rate_2534 = (births_age2534 / pop_age2534),
         fer_rate_3544 = (births_age3544 / pop_age3544),
         repro_pop = pop_age1524 + pop_age2534 + pop_age3544,
         # fertility_rate_state = 30 *(
         #   (fer_rate_1524*(pop_age1524/repro_pop)) +
         #     (fer_rate_2534*(pop_age2534/repro_pop)) +
         #     (fer_rate_3544*(pop_age3544/repro_pop)))
         )
```

```{r}
# merge and recalculate number of births. 
infant_mort1 <- infant_mortality_biannual_data |>
  rename("infant_births_total"=births_total) |>
  mutate(across(starts_with("births_"), ~ .x/infant_births_total, .names="prop_{.col}")) |>
  select( c(starts_with("deaths_"),starts_with("prop_births"), infant_births_total, state,year,bacode)) |>
  filter(year >=2016) 

infant_mort1 <- infant_mort1 |>
  mutate(across(colnames(infant_mort1), ~ replace_na(.x,0)))


fertil_merg_filter <- fertility_merged2 |> select(c(starts_with("prop_births"),births_total, state, year,bacode)) |> select(11:18)
  
prop_only_merge <- infant_mort1 |>
  left_join(fertil_merg_filter, by=join_by(state,year,bacode)) |>
  mutate(
    norm_births_nhblack = (prop_births_nhblack.x + prop_births_nhblack.y)/2,
    norm_births_nhwhite =( prop_births_nhwhite.x + prop_births_nhwhite.y)/2,
    norm_births_hisp = (prop_births_hisp.x + prop_births_hisp.y)/2,
    norm_births_otherraceeth = (prop_births_otherraceeth.x + prop_births_otherraceeth.y)/2,
    norm_total_births = (infant_births_total+births_total)/2
  ) |>
  mutate(across(starts_with("norm_births_"), ~round(.x*norm_total_births,0), .names="{.col}")) |>
  select(-c(starts_with("prop_"))) |>
  mutate(across(starts_with("deaths_"), ~ round(.x/norm_total_births*1000, 2), .names="infantMort_{.col}")) #|>
  #mutate(across(starts_with("norm_births_"), ~ round(.x/norm_total_births*1000, 2), .names#="fertilityRate_{.col}"))

  
fertility_mortality <- fertility_merged2 |>
  left_join(infant_mortality_biannual_data, by = join_by(state,year, bacode)) |>
  select(-c(ends_with(".x"), ends_with(".y"), starts_with("deaths"))) |>
  left_join(prop_only_merge, by=join_by(state,year,bacode)) |>
  mutate(fer_rate_nhblack = norm_births_nhblack / pop_nhblack,
         fer_rate_nhwhite = norm_births_nhwhite / pop_nhwhite,
         fer_rate_hisp = norm_births_hisp / pop_hisp,
         fer_rate_otherraceeth = norm_births_otherraceeth / pop_otherraceeth)
  
#median_income <- read.csv('~/pstat100/final_project/median_income_2016_2023.csv')
median_income <- read.csv('~/Desktop/median_income_2016_2023.csv')

```

```{r} 
#for dataset
births_deaths <- fertility_mortality %>% 
  select(state, year, bacode, births_age1524:births_nonmedicaid, fer_rate_1524:repro_pop, exposed_infdeaths, deaths_nhblack:deaths_total, infant_births_total:infantMort_deaths_total, fer_rate_nhblack:fer_rate_otherraceeth, pop_age1524:pop_age3544 ) %>% 
  mutate(norm_total_births = round(norm_total_births, 0),
         region = case_when(
           state %in% c("California", "Oregon", "Washington", "Idaho", "Nevada", "Utah", "Colorado", "Montana", "Wyoming", "Hawaii", "Alaska") ~ "West",
           state %in% c("Arizona", "New Mexico", "Texas", "Oklahoma") ~ "Southwest",
           state %in% c("Kansas", "Nebraska", "South Dakota", "North Dakota", "Missouri", "Iowa", "Minnesota", "Illinois", "Wisconsin", "Indiana", "Ohio", "Michigan") ~ "Midwest",
           state %in% c("Arkansas", "Louisiana", "Mississippi", "Alabama", "Tennessee", "Georgia", "Florida", "South Carolina", "North Carolina", "Kentucky", "Virginia", "West Virginia", "Delaware", "District of Columbia") ~ "Southeast",
           state %in% c("New Jersey", "Pennsylvania", "Maryland", "Connecticut", "Rhode Island", "Massachusetts", "Vermont", "New Hampshire", "Maine", "New York") ~ "Northeast",
           TRUE ~ "missing"
         ))

population_update <- fertility_mortality %>% 
  select(state, year, bacode, pop_total:pop_age3544, prop_births_1524:prop_births_otherraceeth)

births_deaths <- births_deaths %>% 
  left_join(median_income, by = c("state", "year"))

population_update <- population_update %>% 
  left_join(median_income, by = c("state", "year"))

# births_deaths %>% 
#   group_by(year) %>% 
#   summarize(total_births_us = sum(norm_total_births, na.rm = TRUE),
#             tfr = mean(fertility_rate_state, na.rm = TRUE) ) %>% 
#   ungroup()

# births_deaths %>% 
#   group_by(year) %>%
#   summarize(
#     total_births_1524 = sum(births_age1524),
#     total_pop_1524 = sum(pop_age1524),
#     fr = total_births_1524 / total_pop_1524,
#     total = sum(fr) * 10
#   ) 

#fertility rate for US
pop_state <- fertility_mortality |> select(year,matches("pop_age[0-9]")) |> unique() |>
  aggregate(. ~ year, FUN=sum)

fertility_rates <- fertility_mortality |> select(year,matches("births_age[0-9]")) |>
  aggregate(. ~ year, FUN=sum) |>
  left_join(pop_state) |>
  mutate(fert_age1524 = births_age1524/pop_age1524 * 1000,
         fert_age2534 = births_age2534/pop_age2534 * 1000,
         fert_age3544 = births_age3544/pop_age3544 * 1000) |>
  select(year,starts_with("fert_age"), starts_with("pop_age"), starts_with("births_age")) |>
  mutate(tfr = (fert_age1524+fert_age2534+fert_age3544) * 10 /1000,
         gen_fr = ((births_age1524+births_age2534+births_age3544)/(pop_age1524 + pop_age2534 + pop_age3544))  * 1000)

fertility_rates <- fertility_rates %>% 
  select(year, tfr, gen_fr )

births_deaths <- births_deaths %>% 
  left_join(fertility_rates, by = "year")
```

```{r}
births_deaths |>
  select(year:fertility_rate_state,-bacode, norm_births_nhblack:norm_total_births, median_income, -norm_total_births, tfr, gen_fr) |>
  cor(use = "complete.obs") |>
  corrplot(addCoef.col = 1, , number.cex = 0.6, order = "hclust")
```


```{r}
births_deaths %>% 
  select(state, year, fer_rate_1524:fer_rate_3544, fertility_rate_state) %>% 
  group_by(state, year) %>% 
  summarise(fertility_rate_state = sum(fer_rate_1524 + fer_rate_2534 + fer_rate_3544),
            fr = fertility_rate_state * 10,
            total = fr /1000)
```


```{r}
library(ggplot2)

#do states with higher medicaid have higher or lower births?
ggplot(births_deaths, aes(x = births_medicaid, y = norm_total_births)) + geom_point() + geom_smooth(method = "lm") + labs(x = "Births on Medicaid", y = "Total Births")

#wont work
ggplot(births_deaths, aes(x = births_medicaid, y = deaths_total)) + geom_point() + geom_smooth(method = "lm")
```

```{r}
# fertility_edu <- fertility_years %>% 
#   pivot_longer(cols = c("births_nohs", "births_hs", "births_somecoll", "births_coll"), names_to = "edu_backg", values_to = "edu_births")

#ethinicity births, histogram is also right skewed
ethi_births <- births_deaths %>% 
  select(starts_with("norm_births"), year, bacode, state, region) %>% 
  pivot_longer(cols = starts_with("norm_births"), names_to = "ethnicity", values_to = "eth_births") 

eth_median <- ethi_births %>% 
  group_by(year,ethnicity) %>%
  summarise(median = median(eth_births))

eth_region <- ethi_births %>% 
  group_by(region, ethnicity) %>% 
  summarise(median_region = median(eth_births))

ggplot(ethi_births, aes(x = ethnicity, y = eth_births, fill = ethnicity)) + geom_bar(stat = "identity")

#median births per year
ggplot(eth_median, aes(x = year, y = median, color = ethnicity, group = ethnicity)) + geom_point() + geom_line()

ggplot(eth_region, aes(x = region, y = median_region, color = ethnicity, group = ethnicity)) + geom_point() + geom_line()
```

```{r}
ethi_deaths <- births_deaths %>% 
  select(deaths_nhblack, deaths_nhwhite, deaths_hisp, deaths_otherraceeth, year, bacode, state, region) %>% 
  pivot_longer(cols = c(deaths_nhblack, deaths_nhwhite, deaths_hisp, deaths_otherraceeth), names_to = "ethnicity", values_to = "eth_deaths")
```

```{r}
#education 
education_data <- births_deaths %>% 
  pivot_longer(cols = c(births_nohs, births_hs, births_somecoll, births_coll),
               names_to = "education_level",
               values_to = "births")
#right skewed
#hist(education_data$births)

education_median <- education_data %>% 
  group_by(year, education_level) %>% 
  summarise(median_births = median(births))

education_region <- education_data %>% 
  group_by(region, education_level) %>% 
  summarise(median_births = median(births))

#bar graph of education level
ggplot(education_data, aes(x = education_level, y = births, fill = education_level)) + geom_bar(stat = "identity")

#median births per year
ggplot(education_median, aes(x = year, y = median_births, color = education_level, group = education_level)) + geom_point() + geom_line()

ggplot(education_region, aes(x = region, y = median_births, color = education_level, group = education_level)) + geom_point() + geom_line()
```

```{r}
library(dplyr)
library(gt)

ethi_births %>% #PVIOT THIS
  group_by(region, ethnicity) %>%
  summarise(Total_Births = sum(eth_births)) %>%
  mutate(ethnicity = recode(ethnicity,
                            "norm_births_hisp" = "Hispanic",
                            "norm_births_nhblack" = "Non-Hispanic Black",
                            "norm_births_nhwhite" = "Non-Hispanic White",
                            "norm_births_otherraceeth" = "Other Race")) %>%
  pivot_wider(
    names_from = region,
    values_from = Total_Births,
  ) %>% select(ethnicity,West,Southwest,Midwest,Southeast,Northeast) |>
  gt() %>%
  cols_label(
    ethnicity = "Ethnicity") %>%
  tab_header(
    title = "Births by Ethnicity Across U.S. Regions"
  )

ethi_births %>% 
  group_by(ethnicity) %>%
  summarise(Total_Births = sum(eth_births)) %>%
  mutate(ethnicity = recode(ethnicity,
                            "norm_births_hisp" = "Hispanic",
                            "norm_births_nhblack" = "Non-Hispanic Black",
                            "norm_births_nhwhite" = "Non-Hispanic White",
                            "norm_births_otherraceeth" = "Other Race")) %>% 
  gt() %>%
  cols_label(
    ethnicity = "Ethnicity", 
    Total_Births = "Total Births") %>% 
  tab_header(
    title = "Births by Ethnicity in the United States"
  ) 


# ethi_deaths <- births_deaths %>% 
#   select(deaths_nhblack, deaths_nhwhite, deaths_hisp, deaths_otherraceeth, year, bacode, state, region) %>% 
#   pivot_longer(cols = c(deaths_nhblack, deaths_nhwhite, deaths_hisp, deaths_otherraceeth), names_to = "ethnicity", values_to = "eth_deaths")

ethi_deaths %>% 
  group_by(ethnicity) %>% 
  summarise(total_deaths = sum(eth_deaths)) %>% 
  mutate(ethnicity = recode(ethnicity,
                            "deaths_hisp" = "Hispanic",
                            "deaths_nhblack" = "Non-Hispanic Black",
                            "deaths_nhwhite" = "Non-Hispanic White",
                            "deaths_otherraceeth" = "Other Race")) %>%
  gt() %>% 
  cols_label(
    ethnicity = "Ethnicity", 
    total_deaths = "Total Births") %>% 
  tab_header(
    title = "Infant Deaths by Ethnicity in the United States"
  ) 

ethi_deaths %>% # FIXED THE PIVOT
  group_by(region, ethnicity) %>% 
  summarise(total_deaths = sum(eth_deaths)) %>% 
  mutate(ethnicity = recode(ethnicity,
                            "deaths_hisp" = "Hispanic",
                            "deaths_nhblack" = "Non-Hispanic Black",
                            "deaths_nhwhite" = "Non-Hispanic White",
                            "deaths_otherraceeth" = "Other Race")) |>
  pivot_wider(
    names_from = region,
    values_from = total_deaths,
  ) %>% select(ethnicity,West,Southwest,Midwest,Southeast,Northeast) |>
  gt() %>% 
  cols_label(
    ethnicity = "Ethnicity") %>% 
  tab_header(
    title = "Infant Deaths by Ethnicity by U.S. Region"
  ) 
  
#work with raw data first
#compare infant mortality rates
#color by fertility rates (age group) scatterplot x = fertility y = mortality 
#how do ethnic, educational, and regional factors influence birth rates and infant mortality trends across the US from 2016 to 2023?
# make 2 more tables for fertility rates and infant mortality rates.
```

```{r}
fertility_rate <- births_deaths %>% 
  pivot_longer(cols = matches("fer_rate_[0-9]"),
               names_to = "fertility_rate_age",
               values_to = "rate")
hist(fertility_rate$rate)

fertility_mode <- fertility_rate %>% 
  group_by(region, fertility_rate_age) %>% 
  summarise(mode_rate = median(rate))

ggplot(fertility_mode, aes(x = region, y = mode_rate, color = fertility_rate_age, group = fertility_rate_age)) + 
  geom_point() + geom_line()
```

```{r}
set.seed(314)
kmeans_result <- kmeans(fertility_rate$rate, centers = 2)
fertility_rate$cluster <- kmeans_result$cluster

ggplot(fertility_rate, aes(x = rate, fill = as.factor(cluster))) +
  geom_histogram()

first_cluster <- fertility_rate %>% 
  filter(cluster ==1)

fertility_median1 <- first_cluster %>% 
  group_by(region, fertility_rate_age) %>% 
  summarise(median_rate = median(rate))

second_cluster <- fertility_rate %>% 
  filter(cluster ==2)

fertility_median2 <- second_cluster %>% 
  group_by(region, fertility_rate_age) %>% 
  summarise(median_rate = median(rate))

ggplot(fertility_median1, aes(x = region, y = median_rate, color = fertility_rate_age, group = fertility_rate_age)) + geom_point() + geom_line()

ggplot(fertility_median2, aes(x = region, y = median_rate, color = fertility_rate_age, group = fertility_rate_age)) + geom_point() + geom_line()
```

```{r}
age_data <- births_deaths %>% 
  select(starts_with("births_age"), year, region) %>% 
  pivot_longer(cols = starts_with("births_age"),
               names_to = "age_groups",
               values_to = "births")

hist(age_data$births)

age_median <- age_data %>% 
  group_by(year, age_groups) %>% 
  summarise(median_births = median(births))

age_median1 <- age_data %>% 
  group_by(region, age_groups) %>% 
  summarise(median_births = median(births))

#bar graph of education level
ggplot(age_data, aes(x = age_groups, y = births, fill = age_groups)) + geom_bar(stat = "identity")

ggplot(age_median1, aes(x = region, y = median_births, color = age_groups, group = age_groups)) + geom_point() + geom_line()

ggplot(age_median, aes(x = year, y = median_births, color = age_groups, group = age_groups)) + geom_point() + geom_line()
```

```{r}
inf_fer_rates  <- births_deaths |> select(state, year, bacode, infantMort_deaths_nhblack:region, -infantMort_deaths_con,-infantMort_deaths_noncon,
                        -infantMort_deaths_neo,-infantMort_deaths_total) 

inf_fer_rates1 <- inf_fer_rates |> select(state:infantMort_deaths_otherraceeth,region) |>
  pivot_longer(
    cols = starts_with("infantMort_"),
    names_to = "ethnicity",
    values_to = "InfantMortality"
  ) |>
  mutate(ethnicity = recode(ethnicity,
                            "infantMort_deaths_hisp" = "Hispanic",
                            "infantMort_deaths_nhblack" = "Non-Hispanic Black",
                            "infantMort_deaths_nhwhite" = "Non-Hispanic White",
                            "infantMort_deaths_otherraceeth" = "Other Race"))


inf_fer_rates2 <- inf_fer_rates  |> select(c(state:bacode, fer_rate_nhblack:region)) |>
  pivot_longer(
    cols= starts_with("fer_rate"),
    names_to = "ethnicity",
    values_to = "FertilityRate"
  ) |> 
  mutate(ethnicity = recode(ethnicity,
                            "fer_rate_hisp" = "Hispanic",
                            "fer_rate_nhblack" = "Non-Hispanic Black",
                            "fer_rate_nhwhite" = "Non-Hispanic White",
                            "fer_rate_otherraceeth" = "Other Race"))

inf_fer_rates_main <- inf_fer_rates1 |> 
  left_join(inf_fer_rates2, by=join_by(state,year,ethnicity,region,bacode))
  # pivot_wider(
  #   names_from=region,
  #   values_from=c(InfantMortality, FertilityRate)
  #   
  # )
inf_fer_rates_main
inf_fer_rates_main |> ggplot(aes(y=InfantMortality, x=FertilityRate, col=ethnicity)) +
  geom_point() +
  scale_y_sqrt() +
  facet_wrap(vars(region))

# y=fertility
# x=mortality
# color=eth
# facet(regions)

```

get correlation matrix?
pick pcs?
linear regressions
analyze pcs by table
graph pc1 to pc2 ?
densities on the side of the plots

problems at the end

## Fertility Rate Calculations
```{r}
# births_deaths |>
#   select(year, norm_total_births) |>
#   group_by(year) |>
#   summarise(total_births = sum(norm_total_births)) |>
#   ggplot(aes(x = year, y = total_births)) + geom_col(fill = "skyblue") +
#   scale_x_continuous(breaks = seq(min(births_deaths$year), max(births_deaths$year), by = 1)) +
#   labs(x = "Year", y = "Total Births", title = "Total Births Per Year In the U.S.") 
# 
# births_deaths |>
#   select(year, deaths_total) |>
#   group_by(year) |>
#   summarise(total_deaths = sum(deaths_total)) |>
#   ggplot(aes(x = year, y = total_deaths)) + geom_col(fill = "purple") +
#   scale_x_continuous(breaks = seq(min(births_deaths$year), max(births_deaths$year), by = 1)) +
#   labs(x = "Year", y = "Total Births", title = "Total Births Per Year In the U.S.")

births_deaths |>
  select(year:fertility_rate_us,-bacode, norm_births_nhblack:norm_total_births, median_income, -norm_total_births) |>
  cor(use = "complete.obs") |>
  corrplot(addCoef.col = 1, , number.cex = 0.6, order = "hclust")

birth_rates <- births_deaths |>
  select(year:fertility_rate_us, norm_births_nhblack:norm_total_births, median_income, region, fer_rate_nhblack:fer_rate_otherraceeth, -norm_total_births)

full_model <- lm(fertility_rate_us ~ ., data = birth_rates) %>% 
  step(direction = "backward")
library(car)
vif(full_model)
```

## Infant Mortality 

```{r}
# BIRTH_DEATHS has Infant Mortality by race if we are interested in that
#  By state by year Grouped to minority.
# calculation = minority_infant_mort/sum(births in minorities)
births_deaths1 <- births_deaths |>
  select(state,year,starts_with("deaths"),starts_with("norm_births"),starts_with("births_age"))


infantMort_eth <- births_deaths1 |>
  group_by(state,year) |>
  summarize(across(everything(), sum)) |>
  select(state,year,deaths_nhblack,deaths_nhwhite,deaths_hisp,deaths_otherraceeth, 
         matches("norm_births_[a-z]")) |>
  mutate(minority_deaths = deaths_nhblack + deaths_hisp + deaths_otherraceeth,
         minority_births = norm_births_nhblack + norm_births_hisp + norm_births_otherraceeth) |>
  mutate(Minority_mort = minority_deaths/minority_births,
         Nonminority_mort = deaths_nhwhite/norm_births_nhwhite,
         InfantMort_GAP = (Minority_mort - Nonminority_mort)*100) |> 
  filter(year!=2020) |>
  select(state,year,Minority_mort,Nonminority_mort,InfantMort_GAP) |>
  ungroup() 

print(infantMort_eth)
## Mortality numbers are very small, we might have to transform it a bit
infantMort_eth1 <- infantMort_eth |> select(state,year,InfantMort_GAP)
```

Get total fertility by state by year.  
Transform fertility data to get by Minority and Non-minority

## Fertility Rates

```{r}
  
# GET TOTAL FERTILITY RATE BY STATE BY YEAR
# Deselect year=2020 because Census data does not have 2020 data

pop_year <- fertility_mortality |> select(year,state,matches("pop_age[0-9]")) |> filter(year!=2020) |>
  unique() |>
  group_by(state,year)

total_fertilityUS <- fertility_mortality |> select(year,state,matches("births_age[0-9]")) |> 
  filter(year!=2020) |>
  group_by(state,year) |>
  summarize(across(everything(), sum)) |>
  left_join(pop_year) |>
  mutate(fert_age1524 = births_age1524/pop_age1524 * 1000,
         fert_age2534 = births_age2534/pop_age2534 * 1000,
         fert_age3544 = births_age3544/pop_age3544 * 1000) |>
  select(year,starts_with("fert_age")) |>
  mutate(total_fer = (fert_age1524+fert_age2534+fert_age3544)*10) 

print(total_fertilityUS)

# GET it by state and year to merge with Census data later

TFR_USstyr <- total_fertilityUS |> select(state,year,total_fer) |>
  mutate(total_fer = total_fer/1000) |>
  ungroup()
```


### Region
```{r}
# mutate states to regions, get the total population by region for each year
pop_region <- fertility_mortality |> select(state,year,matches("pop_age[0-9]")) |> unique() |>
mutate(region = case_when(          # rename into regions
           state %in% c("California", "Oregon", "Washington", "Idaho", "Nevada", "Utah", "Colorado", "Montana", "Wyoming", "Hawaii", "Alaska") ~ "West",
           state %in% c("Arizona", "New Mexico", "Texas", "Oklahoma") ~ "Southwest",
           state %in% c("Kansas", "Nebraska", "South Dakota", "North Dakota", "Missouri", "Iowa", "Minnesota", "Illinois", "Wisconsin", "Indiana", "Ohio", "Michigan") ~ "Midwest",
           state %in% c("Arkansas", "Louisiana", "Mississippi", "Alabama", "Tennessee", "Georgia", "Florida", "South Carolina", "North Carolina", "Kentucky", "Virginia", "West Virginia", "Delaware", "District of Columbia") ~ "Southeast",
           state %in% c("New Jersey", "Pennsylvania", "Maryland", "Connecticut", "Rhode Island", "Massachusetts", "Vermont", "New Hampshire", "Maine", "New York") ~ "Northeast",
           TRUE ~ "missing")) |>
  select(-state) |>
  group_by(region,year) |>
  summarize(across(everything(), sum))

# Get TFR by region by year
TFR_region <- fertility_mortality |> select(state,year,matches("births_age[0-9]")) |>
mutate(region = case_when(
           state %in% c("California", "Oregon", "Washington", "Idaho", "Nevada", "Utah", "Colorado", "Montana", "Wyoming", "Hawaii", "Alaska") ~ "West",
           state %in% c("Arizona", "New Mexico", "Texas", "Oklahoma") ~ "Southwest",
           state %in% c("Kansas", "Nebraska", "South Dakota", "North Dakota", "Missouri", "Iowa", "Minnesota", "Illinois", "Wisconsin", "Indiana", "Ohio", "Michigan") ~ "Midwest",
           state %in% c("Arkansas", "Louisiana", "Mississippi", "Alabama", "Tennessee", "Georgia", "Florida", "South Carolina", "North Carolina", "Kentucky", "Virginia", "West Virginia", "Delaware", "District of Columbia") ~ "Southeast",
           state %in% c("New Jersey", "Pennsylvania", "Maryland", "Connecticut", "Rhode Island", "Massachusetts", "Vermont", "New Hampshire", "Maine", "New York") ~ "Northeast",
           TRUE ~ "missing")) |>
  select(-state) |>
  group_by(region,year) |>
  summarize(across(everything(), sum)) |>
  left_join(pop_region) |>
  mutate(fert_age1524 = births_age1524/pop_age1524 * 1000,
         fert_age2534 = births_age2534/pop_age2534 * 1000,
         fert_age3544 = births_age3544/pop_age3544 * 1000) |>
  select(year,starts_with("fert_age")) |>
  mutate(total_fer = (fert_age1524+fert_age2534+fert_age3544)*10) 

print(TFR_region)

# POPULATION by Ethnicity by Region
popEth_region <- fertility_mortality |> select(state,year,pop_nhblack,pop_nhwhite,pop_hisp,pop_otherraceeth) |> unique() |>
mutate(region = case_when(        
           state %in% c("California", "Oregon", "Washington", "Idaho", "Nevada", "Utah", "Colorado", "Montana", "Wyoming", "Hawaii", "Alaska") ~ "West",
           state %in% c("Arizona", "New Mexico", "Texas", "Oklahoma") ~ "Southwest",
           state %in% c("Kansas", "Nebraska", "South Dakota", "North Dakota", "Missouri", "Iowa", "Minnesota", "Illinois", "Wisconsin", "Indiana", "Ohio", "Michigan") ~ "Midwest",
           state %in% c("Arkansas", "Louisiana", "Mississippi", "Alabama", "Tennessee", "Georgia", "Florida", "South Carolina", "North Carolina", "Kentucky", "Virginia", "West Virginia", "Delaware", "District of Columbia") ~ "Southeast",
           state %in% c("New Jersey", "Pennsylvania", "Maryland", "Connecticut", "Rhode Island", "Massachusetts", "Vermont", "New Hampshire", "Maine", "New York") ~ "Northeast",
           TRUE ~ "missing")) |>
  select(-state) |>
  group_by(region,year) |>
  summarize(across(everything(), sum))

# Get TFR by eth by region by year
EthRegion_TFR <- fertility_mortality |> select(state,year,norm_births_nhblack,norm_births_nhwhite,norm_births_hisp,norm_births_otherraceeth) |>
mutate(region = case_when(          # rename into regions
           state %in% c("California", "Oregon", "Washington", "Idaho", "Nevada", "Utah", "Colorado", "Montana", "Wyoming", "Hawaii", "Alaska") ~ "West",
           state %in% c("Arizona", "New Mexico", "Texas", "Oklahoma") ~ "Southwest",
           state %in% c("Kansas", "Nebraska", "South Dakota", "North Dakota", "Missouri", "Iowa", "Minnesota", "Illinois", "Wisconsin", "Indiana", "Ohio", "Michigan") ~ "Midwest",
           state %in% c("Arkansas", "Louisiana", "Mississippi", "Alabama", "Tennessee", "Georgia", "Florida", "South Carolina", "North Carolina", "Kentucky", "Virginia", "West Virginia", "Delaware", "District of Columbia") ~ "Southeast",
           state %in% c("New Jersey", "Pennsylvania", "Maryland", "Connecticut", "Rhode Island", "Massachusetts", "Vermont", "New Hampshire", "Maine", "New York") ~ "Northeast",
           TRUE ~ "missing")) |>
  select(-state) |>
  group_by(region,year) |>
  summarize(across(everything(), sum)) |>
  left_join(popEth_region) |>
  mutate(fert_nhblack = norm_births_nhblack/pop_nhblack * 1000*30,
         fert_nhwhite = norm_births_nhwhite/pop_nhwhite * 1000*30,
         fert_hisp = norm_births_hisp/pop_hisp * 1000*30,
         fert_otherraceeth = norm_births_otherraceeth/pop_otherraceeth*1000*30) |>
  select(year,starts_with("fert_"))

print(EthRegion_TFR)
```

### Calculate Fertility Difference
```{r}
popEth_state <- fertility_mortality |> select(state,year,pop_nhblack,pop_nhwhite,pop_hisp,pop_otherraceeth) |> unique() |>
  group_by(state,year) |>
  mutate(pop_minority = pop_nhblack + pop_hisp + pop_otherraceeth)

TFR_GAP <- fertility_mortality |> 
  select(state,year,norm_births_nhblack,norm_births_nhwhite,
         norm_births_hisp,norm_births_otherraceeth) |>
  group_by(state,year) |>
  summarize(across(everything(), sum)) |>
  left_join(popEth_state) |> # Minority Fertility as eth_birth/pop_minority
  mutate(Minority_fer = (norm_births_nhblack/pop_minority + norm_births_hisp/pop_minority + norm_births_otherraceeth/pop_minority) * 30*1000, # multiply by 30 to correct for age gap
         Nonminority_fer = norm_births_nhwhite/pop_nhwhite * 1000*30,
  TFR_gap = (Minority_fer - Nonminority_fer)/1000
         ) |>
  select(year,Minority_fer,Nonminority_fer,TFR_gap)

print(TFR_GAP)

TFR_GAP1 <- TFR_GAP |> ungroup() |> # for merging with Census data
  select(state,year,TFR_gap) |>
  filter(year != 2020)

```

Births per 1000 woman calculation source: (https://www.cdc.gov/nchs/pressroom/nchs_press_releases/2024/20240525.htm)

# Census Data

```{r, cache=TRUE, message=FALSE}
# pop_2016 <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/pop_profile_2016.csv")
# pop_2017 <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/pop_profile_2017.csv")
# pop_2018 <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/pop_profile_2018.csv")
# pop_2019 <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/pop_profile_2019.csv")
# pop_2021 <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/pop_profile_2021.csv")
# pop_2022 <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/pop_profile_2022.csv")
# pop_2023 <- read_csv("~/pstat100/final_project/data/fertility_infant_mortality/pop_profile_2023.csv")


pop_2016 <- read.csv("~/Desktop/pop_profiles/pop_profile_2016.csv")
pop_2017 <- read.csv("~/Desktop/pop_profiles/pop_profile_2017.csv")
pop_2018 <- read.csv("~/Desktop/pop_profiles/pop_profile_2018.csv")
pop_2019 <- read.csv("~/Desktop/pop_profiles/pop_profile_2019.csv")
pop_2021 <- read.csv("~/Desktop/pop_profiles/pop_profile_2021.csv")
pop_2022 <- read.csv("~/Desktop/pop_profiles/pop_profile_2022.csv")
pop_2023 <- read.csv("~/Desktop/pop_profiles/pop_profile_2023.csv")
```

```{r}
# remove unneeded columns and stack each year. 

drop_cols <- c("one_race","two_race","three_race","four_race","total_num_races")

pop_2016m1 <- pop_2016
pop_2017m1 <- pop_2017
pop_2018m1 <- pop_2018
pop_2019m1 <- pop_2019
pop_2021m1 <- pop_2021
pop_2022m1 <- pop_2022
pop_2023m1 <- pop_2023

clean_df <- function(df, drop_c){
  # function to compactly reorganize dataframes
  df1 <- df
  df1 <- df1 |>select(year,everything(),-all_of(drop_c)) |>
    tidyr::separate(ethnicity,"ethnicity",extra="drop")
  return(df1)
}
pop_2016m2 <- pop_2016m1 |> clean_df(drop_cols)
pop_2017m2 <- pop_2017m1 |> clean_df(drop_cols)
pop_2018m2 <- pop_2018m1|> clean_df(drop_cols)
pop_2019m2 <- pop_2019m1|> clean_df(drop_cols)
pop_2021m2 <- pop_2021m1|> clean_df(drop_cols)
pop_2022m2 <- pop_2022m1|> clean_df(drop_cols)
pop_2023m2 <- pop_2023m1 |> select(year,everything(),-all_of(drop_cols)) |>
    tidyr::separate(population_group,"ethnicity",extra="drop")

pop_pre2020 <- rbind(pop_2016m2,pop_2017m2,pop_2018m2,pop_2019m2)
pop_post2020 <- rbind(pop_2021m2,pop_2022m2,pop_2023m2)
main_pop <- rbind(pop_pre2020,pop_post2020)


```

## Convert Percentages to raw values

```{r, cache=TRUE}
main_pop1 <- main_pop |>
  mutate(
    across(matches("total_[a-z]+_pop"), ~ .x/100*total_pop),
    across(matches("pop_age[0-9]"), ~ .x/100*total_pop),
    across(matches("ms_[a-z]"), ~ .x/100*marital_status_pop),
    across(.cols = c(matches("edu_[a-z]") & !matches("edu_attain_pop")), ~ .x/100*edu_attain_pop),
    SNAP = SNAP/100,
    across(matches("hc_[a-z]"), ~ .x/100*health_cov_pop)
  )
```

## Normalize each variable to total population 

```{r}

# group by state and year, normalize all key variables to total_pop
main_pop2 <- main_pop1 |> select(-ethnicity) |>
  group_by(state,year) |>
  summarize(across(everything(), sum)) |> ungroup() |>
  mutate(
  across(matches("total_[a-z]+_pop"), ~ .x/total_pop),
  across(matches("pop_age[0-9]"), ~ .x/total_pop),
  across(matches("ms_[a-z]"), ~ .x/total_pop),
  across(.cols = c(matches("edu_[a-z]") & !matches("edu_attain_pop")), ~ .x/total_pop),
  across(matches("hc_[a-z]"), ~ .x/total_pop)
  )
```

## EDA
```{r}
main_pop3 <- main_pop2 |> 
  select(-c(total_pop,marital_status_pop,edu_attain_pop,income_households,health_cov_pop)) 


# We should separate the variables first, there's too many to graph?

main_pop4 <- main_pop3 |> select(-c(total_male_pop,total_fem_pop)) |> # Join CDC data with Census
  left_join(TFR_GAP1, by = c("state", "year")) |>
  left_join(infantMort_eth1, by = c("state", "year"))

main_popLong <- main_pop4 |>
  pivot_longer(
    cols = !c(state,year,TFR_gap,InfantMort_GAP),
    names_to = "key_var", # name into 1 column
    values_to = "pop_proportion"
  ) |>
  pivot_longer(cols = one_of(c("TFR_gap", "InfantMort_GAP")), 
               names_to = "Maternal_Infant", 
               values_to = "Gap")

main_popLong |> ggplot(aes(x=pop_proportion, y=Gap, color=Maternal_Infant)) +
  geom_point(alpha=.6) +
  facet_wrap(vars(key_var), scale="free")

```
```{r}
main_pop4 |>
  select(-c("state", "year")) |>
  cor(use = "complete.obs") |>
  corrplot(addCoef.col = 1, , number.cex = 0.6)
  
# proportion of people with college degree 
# 
# Total Fertility Rate(TFR) \~ edu_attainment + income_median + snap + health insurance
#health insurance is required

lr_state <- main_pop4 |>
  select(-c(starts_with("ms_"), "TFR_gap", "InfantMort_GAP", starts_with("pop_age"))) |>
  left_join(TFR_USstyr) #|>
  # pivot_longer(
  #   cols = starts_with("edu"),
  #   names_to = "edu_attain", # name into 1 column
  #   values_to = "edu_values"
  # ) |>
  # pivot_longer(
  #   cols = starts_with("hc_"),
  #   names_to = "health_ins", # name into 1 column
  #   values_to = "ins_rate"
  # ) 

lr_state16 <- lr_state |>
  filter(year == 2016) |> 
  pivot_longer(
    cols = starts_with("edu"),
    names_to = "edu_attain", # name into 1 column
    values_to = "edu_values"
  ) |>
  pivot_longer(
    cols = starts_with("hc_"),
    names_to = "health_ins", # name into 1 column
    values_to = "ins_rate"
  ) 

lr_state17 <- lr_state |>
  filter(year == 2017) 
  

lr_state18 <- lr_state |>
  filter(year == 2018)

lr_state19 <- lr_state |>
  filter(year == 2019)

lr_state21 <- lr_state |>
  filter(year == 2021)

lr_state22 <- lr_state |>
  filter(year == 2022)

lr_state23 <- lr_state |>
  filter(year == 2023)

lr_al <- lr_state |>
  filter(state == "Alabama")
```
```{r}
results <- lr_state %>%
  group_by(state, year) %>%
  nest() %>%  # Nest data per state-year
  mutate(model = map(data, ~ lm(total_fer ~ edu_values + health_ins + SNAP, data = .x)),  # Run regression
         results = map(model, tidy),  # Extract coefficients
         r_squared = map_dbl(model, ~ summary(.x)$r.squared)  # Extract R-squared
  ) %>%
  unnest(results) %>%  # Expand coefficients into a table
  select(state, year, term, estimate, std.error, statistic, p.value, r_squared)  # Keep relevant columns

# View results
print(results)
```
```{r}

lin_reg <- lm(total_fer ~ edu_less_hs + edu_hs + edu_somecoll + edu_bach +edu_grad + income_median+ SNAP + hc_private + hc_public + hc_nohc, data = lr_state17)
summary(lin_reg)

#pivoting, did not work
lin <- lm(total_fer ~ income_median + edu_values + ins_rate, data = lr_state16)
summary(lin)

#doing one state and all years and did not work
lin_al <- lm(total_fer ~ edu_less_hs + edu_hs + edu_somecoll + edu_bach +edu_grad + income_median+ SNAP + hc_private + hc_public + hc_nohc, data = lr_al)
summary(lin_al)
```
```{r}
no_state <- main_pop4 |>
  select(-c("state", starts_with("pop_age"), starts_with("ms_"))) 
pca <- prcomp(no_state, center = TRUE, scale. = TRUE)

#pca$rotation
var_ratios <- (pca$sdev^2) / sum(pca$sdev^2)

pca_var_explained <- data.frame(
  Component = seq(1, length(var_ratios)),
  Proportion_of_variance_explained = var_ratios
)
pca_var_explained <- pca_var_explained %>% 
  mutate(Cumulative_variance_explained = cumsum(Proportion_of_variance_explained))

var_explained_plot <- ggplot(pca_var_explained, aes(x = Component)) +
  
  # Proportion of variance explained (green line & points)
  geom_line(aes(y = Proportion_of_variance_explained, color = "Proportion of variance explained"), size = 1) +
  geom_point(aes(y = Proportion_of_variance_explained, color = "Proportion of variance explained"), size = 2) +
  
  # Cumulative variance explained (blue line & points)
  geom_line(aes(y = Cumulative_variance_explained, color = "Cumulative variance explained"), size = 1) +
  geom_point(aes(y = Cumulative_variance_explained, color = "Cumulative variance explained"), size = 2) +
  
  # Custom colors for lines
  scale_color_manual(values = c("Proportion of variance explained" = "#57A44C", 
                                "Cumulative variance explained" = "#5276A7")) +
  
  # Axis labels and theme adjustments
  labs(x = "Component", y = "Variance Explained", color = "Legend") +
  theme_minimal()
print(var_explained_plot)
``` 
```{r}
num_pc <- 5
loading_df <- pca$rotation[, 1:num_pc]
loading_plot_df <- loading_df %>% 
  as.data.frame() %>% 
  tibble::rownames_to_column(var = "Variable") %>% 
  pivot_longer(cols = -Variable, names_to = "Principal_Component",
               values_to = "Loading")
loading_plot_df <- loading_plot_df %>% 
  mutate(zero = 0)

loadings_plot <- ggplot(loading_plot_df, aes(x = Loading, y = Variable, color = Principal_Component)) +
geom_line(aes(group = Variable)) + geom_point() + geom_vline(aes(xintercept = zero), color = "black", linetype = "dashed", size = 0.5) + facet_wrap(~ Principal_Component, scales = "free_y") + labs(x = "Loading", y = "", color = "Principal Component") + theme_minimal() + theme(legend.position = "none")

print(loadings_plot)
```


```{r}

main_popLong |>
  ggplot(aes(x=`pop_proportion`, y=Gap, color=as.factor(year))) +
  geom_smooth(method=lm, aes(linetype=Maternal_Infant)) +
  facet_wrap(vars(pop_proportion), scales="free_x") + 
  colorspace::scale_color_discrete_sequential(palette="Viridis")

```






